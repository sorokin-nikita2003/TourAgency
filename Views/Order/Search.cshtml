@model List<agency.Models.Order>

@foreach (var item in Model)
{
    <div class="card justify-content-center align-items-center mb-3">
        <div class="card-body">
            <div class="text-body" data-field="order-id">Номер заказа @item.Id</div>
            <div class="text-body" data-field="order-status">Статус заказа @item.OrderStatus</div>
            @if (!String.IsNullOrEmpty(@item.PaymentStatus))
            {
                <div class="text-body">Статус оплаты @item.PaymentStatus</div>
            }
            <div class="text-body" data-field="user">Клиент @item.user?.UserName</div>
            <div class="text-body" data-field="buy-time">Дата покупки @item.BuyTime</div>
            <div class="text-body" data-field="price">Цена заказа @item.Price</div>
            <a asp-action="Info" asp-route-id="@item.Id">Подробнее</a>
        </div>
        @if (item.OrderStatus == "Ожидает подтверждения")
        {
            <form class="" asp-action="Submit" asp-route-id="@item.Id" style="margin-right: 10px;">
                <input type="submit" value="Подтвердить" class="btn" />
            </form>
            <form class="" asp-action="Cencel" asp-route-id="@item.Id" style="margin-right: 10px;">
                <input type="submit" value="Отменить" class="btn" />
            </form>
        }
    </div>
}
@if (Model == null || Model.Count == 0)
{
    <div>
        <p>
            Ничего не нашлось(<br />
        </p>
    </div>
}

<script>
        document.addEventListener("DOMContentLoaded", () => {
        const collectData = () => {
            const cards = document.querySelectorAll(".card");
            const orders = [];

            cards.forEach(card => {
                const order = {
                    id: card.querySelector('[data-field="order-id"]')?.textContent.trim(),
                    orderStatus: card.querySelector('[data-field="order-status"]')?.textContent.trim(),
                    paymentStatus: card.querySelector('[data-field="payment-status"]')?.textContent.trim(),
                    user: card.querySelector('[data-field="user"]')?.textContent.trim(),
                    buyTime: card.querySelector('[data-field="buy-time"]')?.textContent.trim(),
                    price: card.querySelector('[data-field="price"]')?.textContent.trim()
                };

                orders.push(order);
            });

            return orders;
        };

        // Функция для отправки данных
        const sendData = async () => {
            const orders = collectData();
            try {
                const response = await fetch("https://localhost:7215/Order/GetAll", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(orders)
                });

                if (response.ok) {
                    console.log("Данные успешно отправлены:", await response.json());
                } else {
                    console.error("Ошибка при отправке данных:", response.statusText);
                }
            } catch (error) {
                console.error("Произошла ошибка:", error);
            }
        };
    });
</script>